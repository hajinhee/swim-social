import Card from "@/components/base/Card";
import type { FeedPosts, SwimData } from "@/types/social";
import { useState } from "react";

const createPost = async (postData: FeedPosts) => {
  // Simulate a network request.
  return new Promise((resolve) =>
    setTimeout(() => {
      console.log("Submitting post:", postData);
      resolve({
        success: true,
        message: "게시물이 성공적으로 등록되었습니다.",
      });
    }, 1000)
  );
};
export const PostCreator = () => {
  const [postType, setPostType] = useState<
    "text" | "picture" | "swim" | "achievement" | "challenge"
  >("text");
  const [newPostContent, setNewPostContent] = useState("");
  const [picture, setPicture] = useState("");
  const [swimData, setSwimData] = useState<SwimData>({
    stroke: "",
    distance: "",
    time: "",
    pace: "",
  });
  const [achievement, setAchievement] = useState("");
  const [challenge, setChallenge] = useState(0);

  const isSubmitDisabled = () => {
    if (newPostContent.trim() === "") return true;

    if (postType === "picture" && picture.trim() === "") return true;
    if (
      postType === "swim" &&
      (Object.values(swimData).some((val) => val.trim() === "") ||
        Object.values(swimData).length === 0)
    )
      return true;
    if (postType === "achievement" && achievement.trim() === "") return true;
    if (postType === "challenge" && challenge <= 0) return true;

    return false;
  };

  const handleSubmit = async () => {
    const basePost = {
      id: Date.now(), // In a real app, this would be generated by the backend.
      user: "김",
      avatar: "my-avatar-url",
      time: new Date().toISOString(),
      content: newPostContent,
      likes: 0,
      hasComments: false,
    };

    let postToSubmit: FeedPosts;

    switch (postType) {
      case "picture":
        postToSubmit = { ...basePost, type: "picture", img: picture };
        break;
      case "swim":
        postToSubmit = { ...basePost, type: "swim", swimData: swimData };
        break;
      case "achievement":
        postToSubmit = {
          ...basePost,
          type: "achievement",
          achievement: achievement,
        };
        break;
      case "challenge":
        postToSubmit = { ...basePost, type: "challenge", progress: challenge };
        break;
      default: // Handles the "text" case as well as any other default case.
        postToSubmit = { ...basePost, type: "text" };
        break;
    }

    try {
      await createPost(postToSubmit);
      console.log("게시물이 성공적으로 등록되었습니다!");
      // Reset the form fields after successful submission.
      setNewPostContent("");
      setPicture("");
      setSwimData({ stroke: "", distance: "", time: "", pace: "" });
      setAchievement("");
      setChallenge(0);
      setPostType("text");
    } catch (error) {
      console.error("게시물 등록에 실패했습니다: ", error);
    }
  };

  const renderAttachedContent = () => {
    switch (postType) {
      case "picture":
        return (
          <input
            type="text"
            placeholder="이미지 URL을 입력하세요"
            value={picture}
            onChange={(e) => setPicture(e.target.value)}
            className="w-full p-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100 dark:placeholder-gray-400"
          />
        );
      case "swim":
        return (
          <div className="grid grid-cols-2 gap-2">
            <input
              type="text"
              placeholder="영법 (예: 자유형)"
              value={swimData.stroke}
              onChange={(e) =>
                setSwimData({ ...swimData, stroke: e.target.value })
              }
              className="w-full p-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100 dark:placeholder-gray-400"
            />
            <input
              type="text"
              placeholder="거리 (예: 500m)"
              value={swimData.distance}
              onChange={(e) =>
                setSwimData({ ...swimData, distance: e.target.value })
              }
              className="w-full p-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100 dark:placeholder-gray-400"
            />
            <input
              type="text"
              placeholder="시간 (예: 10:30)"
              value={swimData.time}
              onChange={(e) =>
                setSwimData({ ...swimData, time: e.target.value })
              }
              className="w-full p-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100 dark:placeholder-gray-400"
            />
            <input
              type="text"
              placeholder="페이스 (예: 2:06/100m)"
              value={swimData.pace}
              onChange={(e) =>
                setSwimData({ ...swimData, pace: e.target.value })
              }
              className="w-full p-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100 dark:placeholder-gray-400"
            />
          </div>
        );
      case "achievement":
        return (
          <input
            type="text"
            placeholder="달성 내용 (예: 수영 일기 100일 달성)"
            value={achievement}
            onChange={(e) => setAchievement(e.target.value)}
            className="w-full p-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100 dark:placeholder-gray-400"
          />
        );
      case "challenge":
        return (
          <input
            type="number"
            placeholder="도전 진행률 (%)"
            value={challenge}
            onChange={(e) => setChallenge(Number(e.target.value))}
            className="w-full p-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100 dark:placeholder-gray-400"
          />
        );
      default:
        return null;
    }
  };

  return (
    <Card className="p-4 md:p-6 mb-4">
      <div className="flex items-start space-x-3 mb-4">
        <div className="w-12 h-12 bg-gradient-to-r from-pink-400 to-blue-400 rounded-full flex items-center justify-center">
          <span className="text-white font-bold">김</span>
        </div>
        <div className="flex-1">
          <textarea
            className="w-full h-20 p-3 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100 dark:placeholder-gray-400 resize-none"
            placeholder="오늘의 수영 기록이나 생각을 공유해보세요."
            value={newPostContent}
            onChange={(e) => setNewPostContent(e.target.value)}
          ></textarea>
          <div className="flex justify-between">
            <div className="flex items-center justify-end space-x-1 ">
              <button
                onClick={() => setPostType("text")}
                className={`flex items-center justify-center w-10 h-10 rounded-full transition-colors duration-200 ${
                  postType === "text"
                    ? "bg-blue-100 text-blue-600"
                    : "text-gray-400 hover:text-gray-600"
                }`}
              >
                <i className="ri-edit-2-line"></i>
              </button>
              <button
                onClick={() => setPostType("picture")}
                className={`flex items-center justify-center w-10 h-10 rounded-full transition-colors duration-200 ${
                  postType === "picture"
                    ? "bg-blue-100 text-blue-600"
                    : "text-gray-400 hover:text-gray-600"
                }`}
              >
                <i className="ri-camera-line"></i>
              </button>
              <button
                onClick={() => setPostType("swim")}
                className={`flex items-center justify-center w-10 h-10 rounded-full transition-colors duration-200 ${
                  postType === "swim"
                    ? "bg-blue-100 text-blue-600"
                    : "text-gray-400 hover:text-gray-600"
                }`}
              >
                <i className="ri-ruler-line"></i>
              </button>
              <button
                onClick={() => setPostType("achievement")}
                className={`flex items-center justify-center w-10 h-10 rounded-full transition-colors duration-200 ${
                  postType === "achievement"
                    ? "bg-blue-100 text-blue-600"
                    : "text-gray-400 hover:text-gray-600"
                }`}
              >
                <i className="ri-medal-line"></i>
              </button>
              <button
                onClick={() => setPostType("challenge")}
                className={`flex items-center justify-center w-10 h-10 rounded-full transition-colors duration-200 ${
                  postType === "challenge"
                    ? "bg-blue-100 text-blue-600"
                    : "text-gray-400 hover:text-gray-600"
                }`}
              >
                <i className="ri-bar-chart-line"></i>
              </button>
            </div>

            <div className="flex justify-end">
              <button
                onClick={handleSubmit}
                disabled={isSubmitDisabled()}
                className={`inline-flex items-center justify-center font-medium rounded-xl transition-all duration-200 cursor-pointer whitespace-nowrap border-blue-300 text-blue-600 px-3 py-1.5  ${
                  isSubmitDisabled()
                    ? "bg-gray-100 text-gray-400 border-gray-200 cursor-not-allowed"
                    : "hover:bg-blue-50"
                }`}
              >
                <i className="ri-send-plane-fill"></i>
              </button>
            </div>
          </div>
        </div>
      </div>

      {renderAttachedContent()}
    </Card>
  );
};
